import os
from dotenv import load_dotenv
load_dotenv()

import json
import datetime
import logging
import gspread
import openai  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
TARGET_CHAT_ID = int(os.environ['TARGET_CHAT_ID'])
GOOGLE_SHEET_ID = os.environ['GOOGLE_SHEET_ID']
GOOGLE_CREDENTIALS_JSON_PATH = os.environ['GOOGLE_CREDENTIALS_JSON_PATH']

openai.api_key = OPENAI_API_KEY  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
with open(GOOGLE_CREDENTIALS_JSON_PATH) as f:
    creds_dict = json.load(f)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–æ–º
async def is_advice(text: str) -> bool:
    prompt = (
        "–ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–∫–∞–∂–∏ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Å–æ–≤–µ—Ç–æ–º. "
        "–ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è - –¥–∞–π –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–≤–µ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å –î–∞, "
        "–µ—Å–ª–∏ —ç—Ç–æ —Å–æ–≤–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ —Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞ —á—Ç–æ —ç—Ç–æ —Å–æ–≤–µ—Ç –æ—Ç 4 –¥–æ 5 –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –ù–µ—Ç, "
        "–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–≤–µ—Ç –∏–ª–∏ —Ç–≤–æ—è –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ 4.\n"
        f'–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"'
    )
    try:
        response = client.chat.completions.create(
    model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        result = response['choices'][0]['message']['content'].strip().lower()
        return '–¥–∞' in result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
def save_penalty(user_id, username, message):
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([str(user_id), username, date, message, "1"])

# –ü–æ–¥—Å—á—ë—Ç —à—Ç—Ä–∞—Ñ–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
def get_week_stats(user_id):
    records = sheet.get_all_records()
    today = datetime.datetime.now()
    week_start = today - datetime.timedelta(days=today.weekday())
    penalties = 0
    advices = 0

    for row in records:
        row_user_id = int(row["user_id"])
        row_date = datetime.datetime.strptime(row["timestamp"], "%Y-%m-%d %H:%M:%S")
        if row_user_id == user_id and row_date >= week_start:
            if int(row["penalty"]) > 0:
                penalties += 1
            else:
                advices += 1
    return penalties, advices

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    text = update.message.text

    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {text}")

    if await is_advice(text):
        today = datetime.datetime.now().weekday()
        penalties, advices = get_week_stats(user.id)

        if today == 0:
            sheet.append_row([str(user.id), user.username, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), text, "0"])
            await update.message.reply_text(
                f"–°–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ø–æ—ç—Ç–æ–º—É –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ–≤–µ—Ç. –≠—Ç–æ –≤–∞—à {advices + 1}-–π —Å–æ–≤–µ—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ."
            )
        else:
            save_penalty(user.id, user.username, text)
            await update.message.reply_text(
                f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ê –∑–Ω–∞—á–∏—Ç –Ω–µ –î–µ–Ω—å —Å–æ–≤–µ—Ç–æ–≤!\n"
                f"–ü–æ–ª—É—á–∞–µ—Ç–µ —à—Ç—Ä–∞—Ñ–Ω–æ–π –±–∞–ª–ª.\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª–µ: {penalties + 1}\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {advices}"
            )
    else:
        logger.info("–°–æ–≤–µ—Ç–æ–º –Ω–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ")

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
async def send_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        records = sheet.get_all_records()
        summary = {}

        for row in records:
            username = row['username']
            summary[username] = summary.get(username, 0) + int(row['penalty'])

        if not summary:
            return

        lines = [f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º:\n"]
        for user, count in summary.items():
            lines.append(f"@{user} ‚Äî {count} —à—Ç—Ä–∞—Ñ–æ–≤")

        lines.append("\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ —è–∑—ã–∫–æ–º. –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏.")
        report = "\n".join(lines)

        await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_weekly_report, 'cron', day_of_week='sun', hour=18, minute=0, args=[app.bot])
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
