import os
import json
import datetime
import logging
import openai
import gspread

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    filters,
    ContextTypes,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
TARGET_USERNAME = os.environ['TARGET_USERNAME']
TARGET_CHAT_ID = int(os.environ['TARGET_CHAT_ID'])
SHEET_NAME = os.environ['SHEET_NAME']
GOOGLE_CREDENTIALS_JSON = os.environ['GOOGLE_CREDENTIALS_JSON']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
gc = gspread.authorize(credentials)
sheet = gc.open(SHEET_NAME).sheet1  # –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–º
async def is_advice(text: str) -> bool:
    prompt = f"""–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–º. –û—Ç–≤–µ—Ç—å "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".
–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2
        )
        result = response['choices'][0]['message']['content'].strip().lower()
        return '–¥–∞' in result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return False

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
def save_penalty(user_id, username, message):
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([str(user_id), username, date, message, "1"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user = update.message.from_user
    text = update.message.text

    if user.username != TARGET_USERNAME:
        return

    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username}: {text}")

    if await is_advice(text):
        today = datetime.datetime.now().weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if today == 0:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –°–æ–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.")
        else:
            save_penalty(user.id, user.username, text)
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –°–æ–≤–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç. –®—Ç—Ä–∞—Ñ–Ω–æ–π –±–∞–ª–ª.")
    else:
        logger.info("–°–æ–≤–µ—Ç–æ–º –Ω–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
async def send_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        records = sheet.get_all_records()
        summary = {}

        for row in records:
            username = row['username']
            summary[username] = summary.get(username, 0) + int(row['penalty'])

        if not summary:
            return

        lines = [f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º:\n"]
        for user, count in summary.items():
            lines.append(f"@{user} ‚Äî {count} —à—Ç—Ä–∞—Ñ–æ–≤")

        lines.append("\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ —è–∑—ã–∫–æ–º. –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏.")
        report = "\n".join(lines)

        await context.bot.send_message(chat_id=TARGET_CHAT_ID, text=report)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á—ë—Ç–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_weekly_report, 'cron', day_of_week='sun', hour=18, minute=0, args=[app.bot])
    scheduler.start()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

